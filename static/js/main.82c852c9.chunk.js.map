{"version":3,"sources":["index.js"],"names":["numbers","Array","keys","LotteryBox","state","number","randomize","effect","numberCopy","map","x","arr","i","random","Math","floor","length","push","splice","setState","setTimeout","Fragment","id","LotteryItem","index","color","this","decrypting","className","onClick","React","Component","props","decryptingDone","timer","setInterval","randomNumber","clearTimeout","round","nextProps","decryptEffect","ReactDOM","render","document","getElementById"],"mappings":"8NAIMA,G,MAAO,YAAOC,MAAM,IAAIC,SAExBC,E,4MACFC,MAAQ,CAAEC,OAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,I,EACrCC,UAAY,WACR,IAAK,EAAKF,MAAMG,OAAQ,CAGpB,IAFA,IAAMC,EAAaR,EAAQS,KAAI,SAACC,GAAD,OAAOA,KAChCC,EAAM,GACHC,EAAI,EAAGA,GAAK,EAAGA,IAAK,CACzB,IAAMC,EAASC,KAAKC,MAChBD,KAAKD,UAAYL,EAAWQ,OAAS,IAEzCL,EAAIM,KAAKT,EAAWK,GAAU,GAC9BL,EAAWU,OAAOL,EAAQ,GAE9B,EAAKM,SAAS,CAAEd,OAAQM,EAAKJ,QAAQ,IACrCa,YAAW,WACP,EAAKD,SAAS,CAAEZ,QAAQ,MACzB,O,uDAKP,OACI,eAAC,IAAMc,SAAP,WACI,oBAAIC,GAAG,QAAP,mBACA,sBAAKA,GAAG,UAAR,UACI,cAACC,EAAD,CACIC,MAAM,IACNC,MAAM,OACNpB,OAAQqB,KAAKtB,MAAMC,OAAO,GAC1BsB,WAAYD,KAAKtB,MAAMG,SAE3B,cAACgB,EAAD,CACIC,MAAM,IACNC,MAAM,OACNpB,OAAQqB,KAAKtB,MAAMC,OAAO,GAC1BsB,WAAYD,KAAKtB,MAAMG,SAE3B,cAACgB,EAAD,CACIC,MAAM,IACNC,MAAM,OACNpB,OAAQqB,KAAKtB,MAAMC,OAAO,GAC1BsB,WAAYD,KAAKtB,MAAMG,SAE3B,cAACgB,EAAD,CACIC,MAAM,IACNC,MAAM,MACNpB,OAAQqB,KAAKtB,MAAMC,OAAO,GAC1BsB,WAAYD,KAAKtB,MAAMG,SAE3B,cAACgB,EAAD,CACIC,MAAM,IACNC,MAAM,MACNpB,OAAQqB,KAAKtB,MAAMC,OAAO,GAC1BsB,WAAYD,KAAKtB,MAAMG,SAE3B,cAACgB,EAAD,CACIC,MAAM,IACNC,MAAM,OACNpB,OAAQqB,KAAKtB,MAAMC,OAAO,GAC1BsB,WAAYD,KAAKtB,MAAMG,SAE3B,qBAAKqB,UAAU,OAAf,eACA,cAACL,EAAD,CACIC,MAAM,IACNC,MAAM,QACNpB,OAAQqB,KAAKtB,MAAMC,OAAO,GAC1BsB,WAAYD,KAAKtB,MAAMG,YAG/B,8BACI,wBACIe,GAAG,MACHM,UAAWF,KAAKtB,MAAMG,OAAS,OAAS,GACxCsB,QAASH,KAAKpB,UAHlB,oC,GAtEKwB,IAAMC,WAmFzBR,E,kDACF,WAAYS,GAAQ,IAAD,8BACf,cAAMA,IACD5B,MAAQ,CACTC,OAAQ,IACR4B,eAAgB,IAJL,E,4DAQF,IAAD,OACZP,KAAKP,SAAS,CAAEc,eAAgB,KAChCP,KAAKQ,MAAQC,aAAY,WACrB,EAAKC,iBACN,IACHhB,YAAW,WACP,EAAKD,SAAS,CACVc,eAAgB,OAChB5B,OAAQ,EAAK2B,MAAM3B,SAEvBgC,aAAa,EAAKH,SACnB,KAAQR,KAAKM,MAAMR,MAAQ,O,qCAI9BE,KAAKP,SAAS,CAAEd,OAAQS,KAAKwB,MAAsB,GAAhBxB,KAAKD,UAAiB,M,yCAG1C0B,GAAY,IACnBZ,EAAeD,KAAKM,MAApBL,WACJY,EAAUZ,aAAeA,GACrBA,GACAD,KAAKc,kB,+BAMb,OACI,qBACIZ,UAAS,eAAUF,KAAKM,MAAMP,MAArB,YAA8BC,KAAKtB,MAAM6B,gBADtD,SAGKP,KAAKtB,MAAMC,a,GAzCFyB,IAAMC,WA+ChCU,IAASC,OAAO,cAACvC,EAAD,IAAgBwC,SAASC,eAAe,W","file":"static/js/main.82c852c9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\n\r\nconst numbers = [...Array(45).keys()];\r\n\r\nclass LotteryBox extends React.Component {\r\n    state = { number: [0, 0, 0, 0, 0, 0, 0] };\r\n    randomize = () => {\r\n        if (!this.state.effect) {\r\n            const numberCopy = numbers.map((x) => x);\r\n            const arr = [];\r\n            for (let i = 0; i <= 7; i++) {\r\n                const random = Math.floor(\r\n                    Math.random() * (numberCopy.length - 1)\r\n                );\r\n                arr.push(numberCopy[random] + 1);\r\n                numberCopy.splice(random, 1);\r\n            }\r\n            this.setState({ number: arr, effect: true });\r\n            setTimeout(() => {\r\n                this.setState({ effect: false });\r\n            }, 8000);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <h1 id=\"title\">Lotto</h1>\r\n                <div id=\"numbers\">\r\n                    <LotteryItem\r\n                        index=\"0\"\r\n                        color=\"blue\"\r\n                        number={this.state.number[0]}\r\n                        decrypting={this.state.effect}\r\n                    />\r\n                    <LotteryItem\r\n                        index=\"1\"\r\n                        color=\"blue\"\r\n                        number={this.state.number[1]}\r\n                        decrypting={this.state.effect}\r\n                    />\r\n                    <LotteryItem\r\n                        index=\"2\"\r\n                        color=\"blue\"\r\n                        number={this.state.number[2]}\r\n                        decrypting={this.state.effect}\r\n                    />\r\n                    <LotteryItem\r\n                        index=\"3\"\r\n                        color=\"red\"\r\n                        number={this.state.number[3]}\r\n                        decrypting={this.state.effect}\r\n                    />\r\n                    <LotteryItem\r\n                        index=\"4\"\r\n                        color=\"red\"\r\n                        number={this.state.number[4]}\r\n                        decrypting={this.state.effect}\r\n                    />\r\n                    <LotteryItem\r\n                        index=\"5\"\r\n                        color=\"grey\"\r\n                        number={this.state.number[5]}\r\n                        decrypting={this.state.effect}\r\n                    />\r\n                    <div className=\"plus\">+</div>\r\n                    <LotteryItem\r\n                        index=\"6\"\r\n                        color=\"bonus\"\r\n                        number={this.state.number[6]}\r\n                        decrypting={this.state.effect}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <button\r\n                        id=\"btn\"\r\n                        className={this.state.effect ? \"hide\" : \"\"}\r\n                        onClick={this.randomize}\r\n                    >\r\n                        추첨!\r\n                    </button>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nclass LotteryItem extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            number: \"?\",\r\n            decryptingDone: \"\",\r\n        };\r\n    }\r\n\r\n    decryptEffect() {\r\n        this.setState({ decryptingDone: \"\" });\r\n        this.timer = setInterval(() => {\r\n            this.randomNumber();\r\n        }, 10);\r\n        setTimeout(() => {\r\n            this.setState({\r\n                decryptingDone: \"done\",\r\n                number: this.props.number,\r\n            });\r\n            clearTimeout(this.timer);\r\n        }, 1000 * +this.props.index + 1000);\r\n    }\r\n\r\n    randomNumber() {\r\n        this.setState({ number: Math.round(Math.random() * 44) + 1 });\r\n    }\r\n\r\n    componentDidUpdate(nextProps) {\r\n        const { decrypting } = this.props;\r\n        if (nextProps.decrypting !== decrypting) {\r\n            if (decrypting) {\r\n                this.decryptEffect();\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                className={`ball ${this.props.color} ${this.state.decryptingDone}`}\r\n            >\r\n                {this.state.number}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nReactDOM.render(<LotteryBox />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}