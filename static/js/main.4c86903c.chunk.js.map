{"version":3,"sources":["index.js"],"names":["numbers","Array","keys","LotteryBox","state","number","randomize","effect","numberCopy","map","x","arr","i","random","Math","floor","length","push","splice","setState","setTimeout","Fragment","id","LotteryItem","index","color","this","decrypting","className","LotteryButton","run","React","Component","props","onClick","decryptingDone","timer","setInterval","randomNumber","clearTimeout","round","nextProps","console","log","decryptEffect","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4c86903c.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nconst numbers = [...Array(45).keys()];\n\nclass LotteryBox extends React.Component {\n    state = { number: [0, 0, 0, 0, 0, 0, 0] };\n    randomize = () => {\n        if (!this.state.effect) {\n            const numberCopy = numbers.map((x) => x);\n            const arr = [];\n            for (let i = 0; i <= 7; i++) {\n                const random = Math.floor(\n                    Math.random() * (numberCopy.length - 1)\n                );\n                arr.push(numberCopy[random] + 1);\n                numberCopy.splice(random, 1);\n            }\n            this.setState({ number: arr, effect: true });\n            setTimeout(() => {\n                this.setState({ effect: false });\n            }, 8000);\n        }\n    };\n\n    render() {\n        return (\n            <React.Fragment>\n                <h1 id=\"title\">Lotto</h1>\n                <div id=\"numbers\">\n                    <LotteryItem\n                        index=\"0\"\n                        color=\"blue\"\n                        number={this.state.number[0]}\n                        decrypting={this.state.effect}\n                    />\n                    <LotteryItem\n                        index=\"1\"\n                        color=\"blue\"\n                        number={this.state.number[1]}\n                        decrypting={this.state.effect}\n                    />\n                    <LotteryItem\n                        index=\"2\"\n                        color=\"blue\"\n                        number={this.state.number[2]}\n                        decrypting={this.state.effect}\n                    />\n                    <LotteryItem\n                        index=\"3\"\n                        color=\"red\"\n                        number={this.state.number[3]}\n                        decrypting={this.state.effect}\n                    />\n                    <LotteryItem\n                        index=\"4\"\n                        color=\"red\"\n                        number={this.state.number[4]}\n                        decrypting={this.state.effect}\n                    />\n                    <LotteryItem\n                        index=\"5\"\n                        color=\"grey\"\n                        number={this.state.number[5]}\n                        decrypting={this.state.effect}\n                    />\n                    <div className=\"plus\">+</div>\n                    <LotteryItem\n                        index=\"6\"\n                        color=\"bonus\"\n                        number={this.state.number[6]}\n                        decrypting={this.state.effect}\n                    />\n                </div>\n                <div>\n                    <LotteryButton\n                        decrypting={this.state.effect}\n                        run={this.randomize}\n                    />\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nclass LotteryButton extends React.Component {\n    render() {\n        return (\n            <button\n                id=\"btn\"\n                className={this.props.decrypting && \"hide\"}\n                onClick={this.props.run}\n            >\n                추첨!\n            </button>\n        );\n    }\n}\n\nclass LotteryItem extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            number: 0,\n            decryptingDone: \"\",\n        };\n    }\n\n    decryptEffect() {\n        this.setState({ decryptingDone: \"\" });\n        this.timer = setInterval(() => {\n            this.randomNumber();\n        }, 10);\n        setTimeout(() => {\n            this.setState({\n                decryptingDone: \"done\",\n                number: this.props.number,\n            });\n            clearTimeout(this.timer);\n        }, 1000 * +this.props.index + 1000);\n    }\n\n    randomNumber() {\n        this.setState({ number: Math.round(Math.random() * 44) + 1 });\n    }\n\n    componentDidUpdate(nextProps) {\n        const { decrypting } = this.props;\n        console.log(decrypting, nextProps.decrypting);\n        if (nextProps.decrypting !== decrypting) {\n            if (decrypting) {\n                this.decryptEffect();\n            }\n        }\n    }\n\n    render() {\n        return (\n            <div\n                className={`ball ${this.props.color} ${this.state.decryptingDone}`}\n            >\n                {this.state.number}\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<LotteryBox />, document.getElementById(\"root\"));\n"],"sourceRoot":""}